close all
clear all

%
% This script adds trail to the particle file generated by the particle
% tracking code.
%
% The source particle file (output of the particle tracking code)
% is called src_file, and the output file of this script with added
% trail particles is called src_file.
%
% After you run the particle tracking code, run this script to get
% a new particle file with added trail.
%
src_file = 'src.pth.nc';
dst_file = 'dst.pth.nc';

current_particle_color = 2.5; % Red
previous_particle_color = 6.5; % White

%
% Number of particles.
%
n_tail = 15;
n_tail_1 = n_tail + 1;

src_info = ncinfo(src_file);

src_dim1 = src_info.Dimensions(1); % n_timesteps NetCDF Dim
src_dim2 = src_info.Dimensions(2); % n_particles NetCDF Dim
n_src_pts = src_dim2.Length;       % n_particles
dst_dim2 = src_dim2;
n_dst_pts = src_dim2.Length * n_tail_1;
dst_dim2.Length = n_dst_pts;

src_time = ncread(src_file,src_info.Variables(1).Name);
src_x = ncread(src_file,src_info.Variables(2).Name);
src_y = ncread(src_file,src_info.Variables(3).Name);
src_z = ncread(src_file,src_info.Variables(4).Name);
src_pper_time = ncread(src_file,src_info.Variables(5).Name);
%
dst_mode = netcdf.getConstant('NETCDF4');
dst_mode = bitor(dst_mode, netcdf.getConstant('CLASSIC_MODEL'));
dst_id = netcdf.create(dst_file, dst_mode);
global_varid = netcdf.getConstant('GLOBAL');
netcdf.putAtt(dst_id,global_varid,'_FillValue', -99999);
%
dst_dim_id1 = netcdf.defDim(dst_id, 'ntimesnap', ...
    src_dim1.Length);
dst_dim_id2 = netcdf.defDim(dst_id, 'nparticle', ...
    dst_dim2.Length);
%
dst_var1 = netcdf.defVar(dst_id, src_info.Variables(1).Name, ...
    'NC_DOUBLE', dst_dim_id1);
%
dst_var2 = netcdf.defVar(dst_id, src_info.Variables(2).Name, ...
    'NC_DOUBLE', [dst_dim_id2, dst_dim_id1]);
netcdf.putAtt(dst_id, dst_var2, '_FillValue', -99999);
%
dst_var3 = netcdf.defVar(dst_id, src_info.Variables(3).Name, ...
    'NC_DOUBLE', [dst_dim_id2, dst_dim_id1]);
netcdf.putAtt(dst_id, dst_var3, '_FillValue', -99999);
%
dst_var4 = netcdf.defVar(dst_id, src_info.Variables(4).Name, ...
    'NC_DOUBLE', [dst_dim_id2, dst_dim_id1]);
netcdf.putAtt(dst_id, dst_var4, '_FillValue', -99999);
%
dst_var5 = netcdf.defVar(dst_id, src_info.Variables(5).Name, ...
    'NC_INT', dst_dim_id1);
netcdf.putAtt(dst_id, dst_var5, '_FillValue', int32(0));
%
netcdf.endDef(dst_id);
netcdf.putVar(dst_id, dst_var1, src_time);
%
% Here, we first construct a matrix (nc_temp) with dimensions:
%
%    rows , cols = (n_src_pts x n_tail) , n_timesteps
%                = n_dst_pts , n_timesteps
% 
% For 2 particles, 4 timesteps, and tail of length 2, this big
% matrix has the form (first index is particle number, second 
% index is timestep id):
% 
% x11 x12 x13 x14
% x21 x22 x23 x24
% x11 x12 x13 x14
% x21 x22 x23 x24
% x11 x12 x13 x14
% x21 x22 x23 x24
%
% Then we change this matrix to the following form:
% 
% x11 x12 x11 x12
% x21 x22 x21 x22
% x11 x11 x12 x13
% x21 x21 x22 x23
% x11 x12 x13 x14
% x21 x22 x23 x24
%
% Then we fill the 
%
nc_temp = repmat(src_x, n_tail_1, 1);
%
% In example i goes from 1 to 3 and n_tail_1 is 3.
%
for i = 1 : src_dim1.Length - 1
    %
    % In the example:
    % (n_tail - 1) * n_src_pts + 1 : n_tail * n_src_pts = 5 : 6
    %
    nc_temp_i = ...
        nc_temp((n_tail_1 - 1) * n_src_pts + 1 : n_tail_1 * n_src_pts, i);
    %
    % In exmaple: j goes from i+1 to min(4, i+3-1) i.e.:
    % i = 1 , j = 2 , 3
    % i = 2 , j = 3 , 4
    % i = 3 , j = 4
    %
    for j = i + 1 : min(src_dim1.Length, i + n_tail_1 - 1)
        %
        % In example j1 is:
        % i = 1 , j1 = 2 , 3
        % i = 2 , j1 = 2 , 3
        % i = 3 , j1 = 2
        %
        j1 = j - i + 1;
        nc_temp((n_tail_1 - j1) * n_src_pts + 1  : ...
            (n_tail_1 - j1 + 1) * n_src_pts, j) = ...
            nc_temp_i;            
    end
end
netcdf.putVar(dst_id, dst_var2, nc_temp);
%
% An alternative way, with less memory consumption. %
%
% for i = 1 : src_dim1.Length
%     nc_temp = repmat(src_x(:, i), src_dim1.Length, 1);
%     netcdf.putVar(dst_id, dst_var2, [0,i-1], [n_dst_pts,1], nc_temp);
% end
%
nc_temp = repmat(src_y, n_tail_1, 1);
for i = 1 : src_dim1.Length - 1
    nc_temp_i = ...
        nc_temp((n_tail_1 - 1) * n_src_pts + 1 : n_tail_1 * n_src_pts, i);
    for j = i + 1 : min(src_dim1.Length, i + n_tail_1 - 1)
        j1 = j - i + 1;
        nc_temp((n_tail_1 - j1) * n_src_pts + 1  : ...
            (n_tail_1 - j1 + 1) * n_src_pts, j) = ...
            nc_temp_i;            
    end
end
netcdf.putVar(dst_id, dst_var3, nc_temp);
%
src_z = current_particle_color * ones(size(src_z));
nc_temp = repmat(src_z, n_tail_1, 1);
for i = 1 : src_dim1.Length - 1
    nc_temp_i = previous_particle_color * ones(n_src_pts,1);
    for j = i + 1 : min(src_dim1.Length, i + n_tail_1 - 1)
        j1 = j - i + 1;
        nc_temp((n_tail_1 - j1) * n_src_pts + 1  : ...
            (n_tail_1 - j1 + 1) * n_src_pts, j) = ...
            nc_temp_i;            
    end
end
netcdf.putVar(dst_id, dst_var4, nc_temp);
clear nc_temp;
%
dst_pper_time = n_tail_1 * src_pper_time;
netcdf.putVar(dst_id, dst_var5, dst_pper_time);
%
netcdf.close(dst_id);

